/**
* Package: angular-progress - v1.0.0 
* Description: automatic progress bar for your angular apps 
* Last build: 2016-10-06 
* @author codekraft-studio 
* @license ISC 
*/
angular.module("angular-progress",[]).config(["$httpProvider",function($httpProvider){return $httpProvider.interceptors.push("angularProgressInterceptor")}]).directive("progressBar",function($interval){function _link(scope,elem,attrs){function _setProgress(n){return elem[0].childNodes[0].style.width=100*n+"%",status=n}function _increment(){var rnd=0;rnd=status>=0&&status<.25?(3*Math.random()+3)/100:status>=.25&&status<.65?3*Math.random()/100:status>=.65&&status<.9?2*Math.random()/100:status>=.9&&status<.99?.005:1e-4,_setProgress(status+rnd)}var interval,status=0;scope.$on("progress:start",function(){$interval.cancel(interval),_setProgress(0),attrs.$updateClass("progress-container start",elem.attr("class")),interval=$interval(function(){return status>=1&&$interval.cancel(interval),_increment()},150)}),scope.$on("progress:stop",function(event,data){var status=data.status?data.status:"stop";return attrs.$updateClass("progress-container "+status,elem.attr("class")),$interval.cancel(interval)}),scope.$on("progress:reset",function(){return attrs.$updateClass("progress-container",elem.attr("class")),_setProgress(0)}),scope.$on("progress:complete",function(){return attrs.$updateClass("progress-container complete",elem.attr("class")),_setProgress(1)})}var directive={restrict:"E",replace:!0,template:'<div id="angular-progress" class="progress-container"><div class="bar"></div></div>',link:_link};return directive}).service("angularProgressInterceptor",function($log,$rootScope,$timeout,Progress){var promise=null,service={request:function(conf){return conf.ignoreProgress||(promise=$timeout(function(){$rootScope.$broadcast("progress:start")},Progress.latency)),conf},requestError:function(rej){return $timeout.cancel(promise),$rootScope.$broadcast("progress:stop",{status:"error"})},response:function(res){return $timeout.cancel(promise),$rootScope.$broadcast("progress:complete"),res},responseError:function(rej){return $timeout.cancel(promise),$rootScope.$broadcast("progress:stop",{status:"error"})}};return service}).service("Progress",function($rootScope){function _start(){return $rootScope.$broadcast("progress:start")}function _stop(status){return $rootScope.$broadcast("progress:stop",{status:status})}function _reset(){return $rootScope.$broadcast("progress:reset")}function _complete(){return $rootScope.$broadcast("progress:complete")}var service={latency:100,start:_start,stop:_stop,reset:_reset,complete:_complete};return service});